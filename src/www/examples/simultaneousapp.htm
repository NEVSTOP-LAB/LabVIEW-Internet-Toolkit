<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<!--last modified on Fri, Apr 17, 1998 9:28 AM-->
<HTML>

<HEAD>
	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
<LINK rel=STYLESHEET href="../itk.css" Type="text/css">

	<META NAME="Author" Content="Internet Toolkit">
	<TITLE>Creating Simultaneous Instances Remote Panels LabVIEW Applications
</TITLE>
</HEAD>

<BODY>

<P><A HREF="index.htm"><IMG SRC="../images/examples.gif" WIDTH="440" HEIGHT="36"
ALIGN="BOTTOM" ALT="G Web Server Examples" BORDER="0"></A>
<H2>Creating Simultaneous Instances Remote Panels LabVIEW Applications</H2>

<H2></H2>

<DL>
	<P>This tutorial teaches you how to use the new Remote Panel feature in LabVIEW in conjunction with VI 
	templates to build LabVIEW applications that have a unique user interface for each new user instead of 
	displaying a common user interface to everyone.  We will refer to such applications as 
	&quot;Simultaneous Instances Remote Panels&quot; applications. This functionality is useful in the case 
	where you want a lot of people to have access to your LabVIEW appliction, but you want each user to see 
	different data that is unique to that individual.  For example, this is useful in the case of distance 
	learning applications where you want every student to use the same LabVIEW VIs, but each student has a 
	different idea for how to use the VI to solve the problem and therefore wants to interact and control it 
	differently.  By using the material provided in this tutorial you can learn how to use the Remote Panels 
	feature in LabVIEW and use VI Templates to build these applications.<BR>
	<BR>
	The LabVIEW Remote Panels feature allows you to view and control VIs throught a standard Web browser.
	Creating the Remote Panels page is easy with the LabVIEW Web Publishing Tool. A few mouse clicks creates 
	a web page with the embedded VI front panel image, that can be viewed through the client's web browser.<BR>
	<BR>
	Remote Panels allow multiple clients to simultaneously view the front panel of the same VI (if multiple 
	remote panel licenses are enabled.) However, only one client can control the VI front panel. By default, 
	the execution system cannot execute multiple calls to the same VI simultaneously. For our distance 
	learning example, this means that every student would see the same application and all of them would have 
	to interact with it in the same way since only one student could control it and everyone else is watching 
	what that one student is doing. <BR>
	<BR>	
	However, if you make a VI reentrant, each instance of the call maintains its own state of information. 
	Then, the execution system runs the VI from its own separate dataspace. Although it does allow mulitple 
	calls to the same VI to occur and for each call to have unique data, it does not allow the VI to be in use 
	by multiple students at the same time.   What would happen in this case is that each student could have 
	unique control of the application but the VI would be accessible by only one student at a time, and the 
	next student would not be able to use the VI until the student currently using the VI was finished.  
	This is a result of how the LabVIEW VI Server actually calls the VI. When you call a VI using a Virtual 
	Instrument Class Reference (Open VI Reference, Property/Invoke Nodes, Close Application/VI Reference), 
	it is treated as if you had opened the front panel and were running the VI. You cannot have multiple 
	copies of a &quot;Top Level&quot; VI running simultaneously.<BR>
	<BR>
	The solution therefore must both allow all students to have unique control of the LabVIEW VI, and allow 
	all of these individual instances of the VI to run simultaneously.  This can be achieved by using the VI 
	templates. Each time a template VI is called simultaneously with VI server, a replica VI with unique name 
	is created. At the end of execution, these uniquely named VIs may be closed and deleted. When the VI is 
	opened as a template VI, each connection to the web page will result in a new instance of the VI and each 
	client can gain control of its instance through the remote panels.  In this case, each student gets a 
	unique instance of the VI to work with each time they open the web page.<BR>
	<BR>
	To show how these technologies can be used, lets walk through an example application that uses this 
	technique.  The example below uses CGI scripting to dynamically access the LabVIEW VI Server and return 
	individual instance of the template VI.  The LabVIEW Internet Toolkit provides the ability for your 
	LabVIEW applications to respond to CGI scripting commands.<UL>
	<BR>
	<DL>
		<TABLE BORDER=1>
		<TR VALIGN=top><TD WIDTH="263"><IMG SRC="../examples/simultaneousapp/databaseviewers.gif" WIDTH=248 HEIGHT=346 ALIGN="top" BORDER="0"></TD><TD WIDTH="365"><TT>&lt;HTML&gt;</TT><BR>
		<TT>&lt;HEAD&gt;</TT><BR>
		<TT>&lt;TITLE&gt;Simultaneous Instances Remote Panels&lt;/TITLE&gt;</TT><BR>
		<TT>&lt;/HEAD&gt;</TT><BR>
		<TT>&lt;BODY&gt;</TT><BR>
		<TT>&lt;H2&gt;Simultaneous Instances Remote Panels&lt;/H2&gt;&lt;P&gt;</TT><BR>
		<TT>Click Submit to be redirected to the selected database viewer.</TT><BR>
		<BR>
		<TT>&lt;FORM action=/cgi-bin/test/RemotePanels.llb/redirect.vi method=post&gt;</TT><BR>
		<TT>Database Viewers (Test CAtegories):</TT><BR>
		<TT>&lt;INPUT TYPE =&quot;RADIO&quot; NAME=&quot;radio&quot; VALUE=&quot;FieldPoint&quot;&gt; FiledPoint</TT><BR>
		<TT>&lt;INPUT TYPE =&quot;RADIO&quot; NAME=&quot;radio&quot; VALUE=&quot;DAQ&quot;&gt; DAQ</TT><BR>
		<TT>&lt;INPUT TYPE =&quot;RADIO&quot; NAME=&quot;radio&quot; VALUE=&quot;IMAQ&quot;&gt; IMAQ</TT><BR>
		<TT>&lt;INPUT TYPE =&quot;RADIO&quot; NAME=&quot;radio&quot; VALUE=&quot;Motion&quot;&gt; Motion</TT><BR>
		<TT>&lt;INPUT TYPE =&quot;RADIO&quot; NAME=&quot;radio&quot; VALUE=&quot;CAN&quot;&gt; CAN</TT><BR>
		<TT>&lt;INPUT TYPE =&quot;RADIO&quot; NAME=&quot;radio&quot; VALUE=&quot;GPIB&quot;&gt; GPIB</TT><BR>
		<TT>&lt;INPUT TYPE =&quot;RADIO&quot; NAME=&quot;radio&quot; VALUE=&quot;FileIO&quot;&gt; FileIO</TT><BR>
		<TT>&lt;INPUT TYPE =&quot;RADIO&quot; NAME=&quot;radio&quot; VALUE=&quot;NetIO&quot;&gt; NetIO</TT><BR>
		<TT>&lt;INPUT TYPE =&quot;RADIO&quot; NAME=&quot;radio&quot; VALUE=&quot;Jitter&quot;&gt; Jitter</TT><BR>
		<TT>&lt;INPUT name=Submit type=submit value=Submit&gt;</TT><BR>
		<TT>&lt;INPUT name=Reset type=reset value=Reset&gt;</TT><BR>
		<TT>&lt;/FROM&gt;</TT><BR>
		<TT>&lt;/BODY&gt;</TT><BR>
		<TT>&lt;/HTML&gt;</TT></TD></TR>
		</TABLE>
		</UL><BR>
	</DL>
	Pressing the Submit button on this page invokes the CGI VI &#8211; <B>redirect.vi</B>. <BR>
	<BR>
	This CGI script will clone a new handler from the handler template (<B>handler.vit</B>), create an HTML 
	document in <B>&lt;LabVIEW-directory&gt;/www </B>that contains an embedded link to the <B>handler.vi</B>, 
	and return HTML code to the web browser that redirects the browser to the HTML document just created.  <BR>
	<BR>
	This is what the diagram of the <B>redirect.vi</B> looks like: <BR>
	<BR>
	<DL><DL>
		<IMG SRC="../examples/simultaneousapp/figure1.gif" WIDTH=550 HEIGHT=242 ALIGN="CENTER" BORDER="0"></P>
		<B>Figure 1</B><BR>
		</DIV><BR>
	</DL></DL>
	The <B>redirect.vi </B>is a state machine which is run from a Browser. The VIs circled in red are the 
	crucial VIs that will be contained in every CGI VI that you create. The VIs outlined in blue are specific 
	to decoding the form elements that were passed to the CGI, as well as building the HTML page to be returned 
	to client's browser.<BR>
	<BR>
	The following block diagram shows the code for the first subVI <B>CreateAndLoadHandler.vi</B><BR>
	<BR>
	<DL><DL>
		<IMG SRC="../examples/simultaneousapp/figure2.gif" WIDTH=550 HEIGHT=283 ALIGN="CENTER" BORDER="0"></P>
		<B>Figure 2</B></DIV><BR>
	</DL></DL>		
	The <B>CreateAndLoadHandler VI</B> checks all the VIs in memory, and searches for a VI whose name starts 
	with &quot;handler&quot; string. If there is no such VI already in memory, it will open a reference to 
	handler VI template, and name the VI &quot;handler0&quot;. If a &quot;handler&quot; VI was found, the 
	created reference will increment the number by one and point to a new <B>handler VI</B>, 
	named &quot;handler1&quot;.<BR>
	<BR>
	Once the reference to the "handler" VI has been created, <B>CreateHandlerHTMLFile VI</B> will execute. 
	This VI will create an .htm page with the embedded VI, and save it into the 
	<B>&lt;LabVIEW-directory&gt;\www </B>directory<BR>
	<DL><DL>
		<BR>
		<IMG SRC="../examples/simultaneousapp/figure3.gif" WIDTH=550 HEIGHT=170 ALIGN="CENTER" BORDER="0"></P>
		<B>Figure 3</B></DIV><BR>
	</DL></DL>
	This embedded page is operated by the LabVIEW built-in G Web server. The second string element in this 
	array of strings, has the HTML code that creates an alert page with the time restriction message. 
	This page informs the user that the browser will be redirected to the default.html page after 5 minutes, 
	or when the Finish button is pressed. The elapsed time is displayed in the Windows status bar at the bottom 
	of the window. The time restriction is added to prevent indefinitely opened remote panel pages.<BR>
	<BR>
	After adding some heading tags, the final page is constructed with the <B>Modified HTML Document.vi</B><BR>
	<DL><DL>
		<BR>
		<IMG SRC="../examples/simultaneousapp/figure4.gif" WIDTH=397 HEIGHT=540 ALIGN="CENTER" BORDER="0"></P>
		<B>Figure 4</B></DIV><BR>
	</DL></DL>
	The <B>Modified HTML Document.vi</B> runs the referenced <B>handler VI</B>, and measures the time needed to 
	display this VI in the remote window. This time will be used by the <B>DelayedClosedRef.vi</B> (below) to 
	provide a more deterministic release of the VI references. <BR>
	<DL><DL>
		<BR>
		<IMG SRC="../examples/simultaneousapp/figure5.gif" WIDTH=550 HEIGHT=216 ALIGN="CENTER" BORDER="0"></P>
		<B>Figure 5</B></DIV><BR>
	</DL></DL>
	The <B>DelayedClosedRef.vi</B> allows 30sec for the browser to load the &quot;handler&quot; VI remote panel 
	image, before closing the reference to this VI. Once a VI is opened remotely, it will remain in memory on 
	the server as long as a remote client is viewing the panel and the VI reference from the CGI is open. 
	By default, the reference from the CGI panel will be closed when the CGI VI is stopped, because it has not 
	been accessed in 120 sec (default CGICacheTime that idle CGIs are cached). This time is specified in 
	<B>&lt;LabVIEW-directory&gt;\internet\http\conf\lvhttp.cfg</B>. <BR>
	<BR>
	The final HTML page with the embedded &quot;handler: VI looks like this: <BR>
	<DL><DL>
		<BR>
		<IMG SRC="../examples/simultaneousapp/figure6.gif" WIDTH=550 HEIGHT=549 ALIGN="CENTER" BORDER="0"></P>
		<B>Figure 6</B></DIV><BR>
	</DL><DL>
	</DL>
		The following example demonstrates how to allow several users to access your LabVIEW application, and have 
		full control of it. <BR>
		<BR>
	<DL>
		<DT><A HREF="remotepanels.htm">
		<B>Simultaneously Controlling Remote Panel Instances of VI Templates</B></A></DT><BR>
		The VI combines the new Remote Panel feature, with VI Templates and CGI scripting.
	</DL>
	</DL>
</DL>

<P>
<HR>
<A HREF="http://www.ni.com">&copy; National Instruments</A>

</BODY>

</HTML>
